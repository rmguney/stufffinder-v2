openapi: 3.0.1
info:
  title: SWE574 Group2 API List
  version: v0.1
servers:
  - url: http://localhost:8080
    description: SWE574 Group2 APIs
paths:
  /api/posts/{postId}/markBestAnswer/{commentId}:
    put:
      tags:
        - post-controller
      operationId: markBestAnswer
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int64
  /api/notifications/{notificationId}/read:
    put:
      tags:
        - notification-controller
      operationId: markAsRead
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  /api/posts/upvote/{postId}:
    post:
      tags:
        - post-controller
      operationId: upvotePost
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int64
  /api/posts/downvote/{postId}:
    post:
      tags:
        - post-controller
      operationId: downvotePost
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int64
  /api/posts/create:
    post:
      tags:
        - post-controller
      operationId: createPost
      requestBody:
        content:
          application/json:
            schema:
              required:
                - post
              type: object
              properties:
                post:
                  $ref: '#/components/schemas/PostCreationDto'
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int64
  /api/mysteryObjects/{id}/upload-image:
    post:
      tags:
        - mystery-object-image-controller
      operationId: uploadImage
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              required:
                - image
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /api/comments/upvote/{commentId}:
    post:
      tags:
        - comment-controller
      operationId: upvoteComment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int64
  /api/comments/downvote/{commentId}:
    post:
      tags:
        - comment-controller
      operationId: downvoteComment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int64
  /api/comments/create:
    post:
      tags:
        - comment-controller
      operationId: createComment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreateDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int64
  /api/auth/register:
    post:
      tags:
        - user-controller
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /api/auth/login:
    post:
      tags:
        - user-controller
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /api/posts/searchForPosts:
    get:
      tags:
        - post-controller
      operationId: searchPosts
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PagedModel'
  /api/posts/getForPostList:
    get:
      tags:
        - post-controller
      operationId: getPostsForPostList
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PagedModelPostListDto'
  /api/posts/getForPostDetails/{postId}:
    get:
      tags:
        - post-controller
      operationId: getPostDetails
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PostDetailsDto'
  /api/notifications/{userId}:
    get:
      tags:
        - notification-controller
      operationId: getUserNotifications
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationDto'
  /api/comments/get/{postId}:
    get:
      tags:
        - comment-controller
      operationId: getCommentsForPost
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentDetailsDto'
  /api/auth/{userId}:
    get:
      tags:
        - user-controller
      operationId: getUserName
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /api/auth/{userId}/posts:
    get:
      tags:
        - user-controller
      operationId: getUserPosts
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostListDto'
  /api/auth/{userId}/comments:
    get:
      tags:
        - user-controller
      operationId: getUserComments
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentDetailsDto'
components:
  schemas:
    PostCreationDto:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        tags:
          uniqueItems: true
          type: array
          items:
            type: string
        image:
          type: string
          format: binary
        mysteryObject:
          $ref: '#/components/schemas/MysteryObject'

    CommentCreateDto:
      type: object
      properties:
        content:
          type: string
        postId:
          type: integer
          format: int64
        parentCommentId:
          type: integer
          format: int64

    PostDetailsDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        author:
          type: string
        title:
          type: string
        description:
          type: string
        tags:
          uniqueItems: true
          type: array
          items:
            type: string
        mysteryObject:
          $ref: '#/components/schemas/MysteryObject'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        upvotes:
          type: integer
          format: int32
        downvotes:
          type: integer
          format: int32
        userUpvoted:
          type: boolean
        userDownvoted:
          type: boolean

    CommentDetailsDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string
        author:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        upvotes:
          type: integer
          format: int32
        downvotes:
          type: integer
          format: int32
        userUpvoted:
          type: boolean
        userDownvoted:
          type: boolean
        postId:
          type: integer
          format: int64
        bestAnswer:
          type: boolean

    MysteryObject:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
        writtenText:
          type: string
        color:
          type: string
        shape:
          type: string
        descriptionOfParts:
          type: string
        location:
          type: string
        hardness:
          type: string
        timePeriod:
          type: string
        smell:
          type: string
        taste:
          type: string
        texture:
          type: string
        value:
          type: number
          format: double
        originOfAcquisition:
          type: string
        pattern:
          type: string
        brand:
          type: string
        print:
          type: string
        functionality:
          type: string
        imageLicenses:
          type: string
        markings:
          type: string
        handmade:
          type: boolean
        oneOfAKind:
          type: boolean
        sizeX:
          type: number
          format: double
        sizeY:
          type: number
          format: double
        sizeZ:
          type: number
          format: double
        weight:
          type: number
          format: double
        item_condition:
          type: string
          enum:
            - NEW
            - LIKE_NEW
            - USED
            - DAMAGED
            - ANTIQUE
        image:
          type: string
          format: byte

    NotificationDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        message:
          type: string
        type:
          type: string
        postId:
          type: integer
          format: int64
        commentId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        read:
          type: boolean

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        password:
          type: string
        bio:
          type: string
        profilePictureUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        receiveNotifications:
          type: boolean

    PostListDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        tags:
          uniqueItems: true
          type: array
          items:
            type: string
        mysteryObjectImage:
          type: string
          format: byte
        solved:
          type: boolean

    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string

    PagedModel:
      type: object
      properties:
        content:
          type: array
          items:
            type: object
        page:
          $ref: '#/components/schemas/PageMetadata'

    PagedModelPostListDto:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/PostListDto'
        page:
          $ref: '#/components/schemas/PageMetadata'

    PageMetadata:
      type: object
      properties:
        size:
          type: integer
          format: int64
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        number:
          type: integer
          format: int64